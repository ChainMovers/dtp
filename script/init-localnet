#!/bin/bash

# Initialize and start a Sui local network.
#
# Warning:
#   If there is an existing sui local network, it will be deleted
#   and replaced with a fresh installation. All modules, objects and
#   transaction done since genesis will be purged.
#
#   This script will also overwrite any changes under 
#   dtp-dev/sui. This sui local repo should not be used
#   to modify sui itself (other than for may be throw away 
#   debug code).
#
# For future reference, this is how the config.yaml was generated:
#     sui genesis --write-config "$GENESIS_DATA_DIR/config.yaml"

# Scripts does not work with version below these.
MIN_SUI_VERSION="sui 0.18.0"
MIN_RUST_VERSION="rustc 1.65.0"

# Utility functions.
setup_error() { echo "$*" 1>&2 ; exit 1; }
version_greater_equal() { printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort; }
update_bin_path() { 
  UBP_SRC_DIR="$HOME/.local/bin"
  UBP_TARGET="$SCRIPT_DIR/$1"
  if [ -d "$UBP_SRC_DIR" ]; then
    if [ ! -L "$UBP_SRC_DIR/$1" ]; then
      ln -s "$UBP_TARGET" "$UBP_SRC_DIR/$1"
      echo "Symlink added: $UBP_SRC_DIR/$1 -> $UBP_TARGET"
    else
      # Verify link is as intended, if not replace it.
      UBP_READLINK=$( readlink -f "$UBP_SRC_DIR/$1" )
      if [[ "$UBP_READLINK" != "$UBP_TARGET" ]]; then
         ln -sf "$UBP_TARGET" "$UBP_SRC_DIR/$1"
         echo "Symlink updated: $UBP_SRC_DIR/$1 -> $UBP_TARGET"
         # If the target is the called script, then replace
         # it and exit (will force user to re-execute from the
         # new link, potentially being a different script version).
         if [[ "$1" == "$SCRIPT_NAME" ]]; then
           setup_error "Retry $1 again (in case the new synlink point to a new version)"
        fi
      fi
    fi
  fi
}

# Verify Sui pre-requisites are installed.
which curl &> /dev/null || setup_error "Need to install curl. See https://docs.sui.io/build/install#prerequisites";
which git &> /dev/null || setup_error "Need to install git. See https://docs.sui.io/build/install#prerequisites";
which cmake &> /dev/null || setup_error "Need to install cmake. See https://docs.sui.io/build/install#prerequisites";
which rustc &> /dev/null || setup_error "Need to install rust. See https://docs.sui.io/build/install#prerequisites";
which cargo &> /dev/null || setup_error "Need to install cargo. See https://docs.sui.io/build/install#prerequisites";

# Verify Rust is recent enough.
version_greater_equal "$(rustc --version)" "$MIN_RUST_VERSION" || setup_error "Upgrade rust to a more recent version";

# Just find the absolute path of the "dtp-dev" where most
# dependencies will be downloaded and build/runtime files
# will be located.
SCRIPT_READLINK="$(readlink -f "$0")"
SCRIPT_NAME="$(basename $SCRIPT_READLINK)"
SCRIPT_DIR="$(dirname $SCRIPT_READLINK)"
DEV_DIR_REL="$SCRIPT_DIR/../../dtp-dev"
DEV_DIR="$(cd "$(dirname "$DEV_DIR_REL")"; pwd)/$(basename "$DEV_DIR_REL")"
MOVE_SRC_DIR_REL="$SCRIPT_DIR/../move"
MOVE_SRC_DIR="$(cd "$(dirname "$MOVE_SRC_DIR_REL")"; pwd)/$(basename "$MOVE_SRC_DIR_REL")"
LOCAL_BIN="$HOME/.local/bin"

# Some other commonly used locations.
SUI_REPO_DIR="$DEV_DIR/sui-devnet"
SUI_BIN_DIR="$SUI_REPO_DIR/target/debug"
GENESIS_DATA_DIR="$SCRIPT_DIR/genesis_data"
PUBLISH_DATA_DIR="$DEV_DIR/publish_data/localnet"

# Configuration files (often needed for sui CLI calls)
NETWORK_CONFIG="$DEV_DIR/localnet/network.yaml"
CLIENT_CONFIG="$DEV_DIR/localnet/client.yaml"

# Create/update path to dtp shell scripts.
update_bin_path "init-localnet"
update_bin_path "lsui"
update_bin_path "publish-localnet"

# Create dtp-dev if does not exists.
mkdir -p "$DEV_DIR"

echo "Output location = $DEV_DIR"

# The script should not be called from a location that will get deleted.
# It would work (on Linux) , but it is just to avoid user confusion later.
CWD=$(pwd -P)
if [[ "$CWD" = "$DEV_DIR/localnet"* ]]; then
  echo "This script can't be called from a location to be deleted [$DEV_DIR/localnet]."
  setup_error "Change current directory location and try again."
fi
CWD=$(pwd -P)
if [[ "$CWD" = "$DEV_DIR/publish_output/localnet"* ]]; then
  echo "This script can't be called from a location to be deleted [$DEV_DIR/publish_output/localnet]."
  setup_error "Change current directory location and try again."
fi

# Stop already executing sui (if any)
# Get ps with "sui start", grep exclude itself from the list, head takes the first process (should not be more than one)
# the 1st sed remove leading space, the 2nd sed split words into line and finally the pid is the word on the first/head line.
OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)

if [ ! -z "$OLD_SUI_PID" ]
then
  echo "Stopping running localnet (sui process pid $OLD_SUI_PID)"
  skill -9 $OLD_SUI_PID
  # Make sure it is dead.
  end=$((SECONDS+15))
  DEAD=false
  AT_LEAST_ONE_SECOND=false
  while [ $SECONDS -lt $end ]; do
    OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)
    if [ -z "$OLD_SUI_PID" ]; then
      break
    else
      echo -n "."
      sleep 1
      AT_LEAST_ONE_SECOND=true
    fi
  done

  # Just UI aesthetic newline for when there was "." printed.
  if [ "$AT_LEAST_ONE_SECOND" = true ]; then
    echo 
  fi

  if [ ! -z "$OLD_SUI_PID" ]; then
    setup_error "Sui process pid=$OLD_SUI_PID still running. You must stop (kill) the sui process before starting a new localnet"  
  fi
fi

# If not already done, get the github sui devnet branch.
if [ ! -d "$DEV_DIR/sui-devnet" ]
then
  git clone -b devnet https://github.com/MystenLabs/sui.git "$DEV_DIR/sui-devnet"  || setup_error "Failed getting Sui devnet branch from github";
fi

# Update sui devnet local repo (if needed)
(cd $DEV_DIR/sui-devnet && git remote update >& /dev/null)
V1=$(cd $DEV_DIR/sui-devnet; git rev-parse HEAD)
V2=$(cd $DEV_DIR/sui-devnet; git rev-parse '@{u}')
if [ $V1 != $V2 ]
then 
  # Does a bit more than needed, but should allow to recover
  # from most operator error...
  echo Updating sui local repo in dtp-dev...
  (cd $DEV_DIR/sui-devnet && git switch devnet > /dev/null)
  (cd $DEV_DIR/sui-devnet && git fetch > /dev/null)
  (cd $DEV_DIR/sui-devnet && git reset --hard origin/devnet > /dev/null)
  (cd $DEV_DIR/sui-devnet && git merge '@{u}')
fi

# Verify sui built is latest.
echo Building localnet using latest Sui devnet branch...
(cd $DEV_DIR/sui-devnet; cargo build)

# Sanity test that the sui binary works
if [ ! -f "$SUI_BIN_DIR/sui" ]; then
  setup_error "$SUI_BIN_DIR/sui binary not found"
fi

SUI_VERSION=$($SUI_BIN_DIR/sui --version)
if [ -z "$SUI_VERSION" ]; then
  setup_error "$SUI_BIN_DIR/sui --version not running properly"
fi

# Check if sui is recent enough.
version_greater_equal "$SUI_VERSION" "$MIN_SUI_VERSION" || setup_error "Sui binary version too old (not supported)"

# Clean-up previous localnet (if exists)
RM_DIR="$DEV_DIR/localnet"
if [ -d "$RM_DIR" ]
then
  echo "Removing existing $RM_DIR directory"
  rm -rf "$RM_DIR"
fi

# Delete localnet publish directory (if exists) to force re-publication.
RM_DIR="$DEV_DIR/publish_output/localnet/"
if [ -d "$RM_DIR" ]
then
  echo "Removing existing $RM_DIR directory"
  rm -rf "$RM_DIR"
fi

echo Creating new localnet directory
mkdir -p "$DEV_DIR/localnet"
$SUI_BIN_DIR/sui genesis --from-config "$GENESIS_DATA_DIR/config.yaml" --working-dir "$DEV_DIR/localnet" >& /dev/null
yes | cp -rf "$GENESIS_DATA_DIR/sui.keystore" "$DEV_DIR/localnet"
yes | cp -rf "$GENESIS_DATA_DIR/client.yaml" "$DEV_DIR/localnet"

# Replace placeholder string in client.yaml with an absolute path to the keystore.
# Notice sed uses '+'' for seperator instead of '/' to avoid clash
# with directory path. Also uses a .bak temp file because Mac (BSD) does not
# allow in-place file change.
SEARCH_STRING="<PUT_WORKING_DIR_PATH_HERE>"
REPLACE_STRING="$DEV_DIR/localnet"
sed -i.bak -e "s+$SEARCH_STRING+$REPLACE_STRING+g" "$DEV_DIR/localnet/client.yaml" && rm "$DEV_DIR/localnet/client.yaml.bak"

# Start the new localnet.
echo "Starting new localnet process (may take up to 30 secs)"
$SUI_BIN_DIR/sui start --network.config "$NETWORK_CONFIG" >& "$DEV_DIR/localnet.log" &
NEW_SUI_PID=$!

# Loop until "sui client" confirms to be working, or exit if that takes
# more than 30 seconds.
end=$((SECONDS+30))
ALIVE=false
AT_LEAST_ONE_SECOND=false
while [ $SECONDS -lt $end ]; do
  CHECK_ALIVE=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" objects | grep -i Digest)
  if [ ! -z "$CHECK_ALIVE" ]; then
    ALIVE=true
    break
  else
    echo -n "."
    sleep 1
    AT_LEAST_ONE_SECOND=true
  fi
done

# Just UI aesthetic newline for when there was "." printed.
if [ "$AT_LEAST_ONE_SECOND" = true ]; then
  echo 
fi

# Act on success/failure of the sui process responding to "sui client".
if [ "$ALIVE" = false ]; then 
  echo "Sui process not responding. Try again? (may be the host is too slow?)."
  exit;
fi

echo "New localnet started ($SUI_VERSION, process pid $NEW_SUI_PID)"

# Make sure localnet exists in sui envs (ignore errors because likely already exists)
echo ========
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" new-env --alias localnet --rpc http://0.0.0.0:9000 >& /dev/null

# Make localnet the active envs (should already be done, just in case, do it again here).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" switch --env localnet > /dev/null

# print sui envs to help debugging (if someone else is using this script).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" envs
echo ========
echo All addresses with coins:
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" addresses
echo ========

WALLET_ADDR=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" active-address)
echo "All coins owned by $WALLET_ADDR (active):"
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" gas
echo ========
echo
echo Remember:
echo "  Use \"dsui\" to access devnet"
echo "  Use \"lsui\" to access your localnet"
echo
echo Success. Try it by typing \"lsui client gas\"
