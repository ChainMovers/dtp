#!/bin/bash

# Initialize and start a Sui local network.
#
# Warning:
#   If there is an existing sui local network, it will be deleted
#   and replaced with a fresh installation. All modules, objects and
#   transaction done since genesis will be purged.
#
#   This script will also overwrite any changes under 
#   workspace/sui. This sui local repo should not be used
#   to modify sui itself (other than for quick throw away 
#   debug code).

# Utility functions.
setup_error() { echo "$*" 1>&2 ; exit 1; }
version_greater_equal() { printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort; }

# Verify Sui pre-requisites are installed.
which curl &> /dev/null || setup_error "Need to install curl. See https://docs.sui.io/build/install#prerequisites";
which git &> /dev/null || setup_error "Need to install git. See https://docs.sui.io/build/install#prerequisites";
which cmake &> /dev/null || setup_error "Need to install cmake. See https://docs.sui.io/build/install#prerequisites";
which rustc &> /dev/null || setup_error "Need to install rust. See https://docs.sui.io/build/install#prerequisites";
which cargo &> /dev/null || setup_error "Need to install cargo. See https://docs.sui.io/build/install#prerequisites";

# Verify Rust is recent enough.
MIN_RUST_VERSION="rustc 1.65.0"
version_greater_equal "$(rustc --version)" "$MIN_RUST_VERSION" || setup_error "Upgrade rust to a more recent version";

# Just find the absolute path of the "workspace" where most
# dependencies will be downloaded and build/runtime files
# will be located.
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
WS_DIR_REL="$SCRIPT_DIR/../workspace"
WS_DIR="$(cd "$(dirname "$WS_DIR_REL")"; pwd)/$(basename "$WS_DIR_REL")"
SUI_BIN_DIR="$WS_DIR/sui/target/debug"
GENESIS_DATA_DIR="$SCRIPT_DIR/genesis_data"

# Configuration files (generated by this script).

NETWORK_CONFIG="$WS_DIR/localnet/network.yaml"
CLIENT_CONFIG="$WS_DIR/localnet/client.yaml"

# Create workspace if does not exists.
mkdir -p "$WS_DIR"

echo "Workspace Location = $WS_DIR"

# If not already done, get the sui devnet branch.
if [ ! -d "$WS_DIR/sui" ]
then
  git clone -b devnet https://github.com/MystenLabs/sui.git "$WS_DIR/sui"  || setup_error "Failed getting Sui devnet branch from github";
fi

# Update sui devnet local repo (as needed)
(cd $WS_DIR/sui && git remote update > /dev/null)
V1=$(cd $WS_DIR/sui; git rev-parse HEAD)
V2=$(cd $WS_DIR/sui; git rev-parse '@{u}')
if [ $V1 != $V2 ]
then 
  # Does a bit more than needed, but should allow to recover
  # from most operator error...
  echo Updating sui local repo in workspace...
  (cd $WS_DIR/sui && git switch devnet > /dev/null)
  (cd $WS_DIR/sui && git fetch > /dev/null)
  (cd $WS_DIR/sui && git reset --hard origin/devnet > /dev/null)
  (cd $WS_DIR/sui && git merge '@{u}')
fi

# Verify sui built is latest.
echo Building localnet using latest Sui devnet branch...
(cd $WS_DIR/sui; cargo build)

# Sanity test that the sui devnet binary works
MIN_SUI_VERSION="sui 0.17.0"
version_greater_equal "$($SUI_BIN_DIR/sui --version)" "$MIN_SUI_VERSION" || setup_error "Sui binary either too old or not working"

# As needed, recreate config.yaml (delete it to force recreating it here).
#
# You may have to delete this config if it changes significantly on devnet,
# otherwise just keep it for the convenience of the address/objects to be
# always the same.
if [ ! -f "$GENESIS_DATA_DIR/config.yaml" ]
then
  $SUI_BIN_DIR/sui genesis --write-config "$GENESIS_DATA_DIR/config.yaml"
fi

# Clean-up previous localnet (if exists)
if [ -d "$WS_DIR/localnet" ]
then
  echo Removing existing localnet  
  rm -rf "$WS_DIR/localnet"
fi

echo Recreating localnet
mkdir -p "$WS_DIR/localnet"
$SUI_BIN_DIR/sui genesis --from-config "$GENESIS_DATA_DIR/config.yaml" --working-dir "$WS_DIR/localnet" >& /dev/null
yes | cp -rf "$GENESIS_DATA_DIR/sui.keystore" "$WS_DIR/localnet"
yes | cp -rf "$GENESIS_DATA_DIR/client.yaml" "$WS_DIR/localnet"

#TODO Make this conditional of detecting localnet running.
#TODO Make this more specific to localnet instead of blind target "sui"
skill -9 pidof sui

# Start the new localnet.
echo Starting localnet process
$SUI_BIN_DIR/sui start --network.config "$NETWORK_CONFIG" >& "$WS_DIR/localnet.log" &

# TODO actively look if running instead of sleep fix amount of time.
sleep 10

# Make sure localnet exists in sui envs (ignore errors because likely already exists)
echo ========
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" new-env --alias localnet --rpc http://0.0.0.0:9000 >& /dev/null

# Make localnet the active envs (should already be done, just in case, do it here).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" switch --env localnet > /dev/null

# print sui envs to help debugging (if someone else is using this script).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" envs
echo ========

# TODO Sanity check that the localnet is as expected.
WALLET_ADDR=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" active-address)
echo All coin objects own by $WALLET_ADDR:
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" gas
echo ========
echo
echo Remember:
echo "  Use \"dsui\" to access devnet"
echo "  Use \"lsui\" to access your localnet"
echo
echo Success. Try it by typing \"lsui client gas\"