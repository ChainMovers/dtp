#!/bin/bash

# Initialize and start a Sui local network.
#
# Warning:
#   If there is an existing sui local network, it will be deleted
#   and replaced with a fresh installation. All modules, objects and
#   transaction done since genesis will be purged.
#
#   This script will also overwrite any changes under 
#   dtp-dev/sui. This sui local repo should not be used
#   to modify sui itself (other than for may be throw away 
#   debug code).
#
# For future reference, this is how the config.yaml was generated:
#     sui genesis --write-config "$GENESIS_DATA_DIR/config.yaml"

NETNAME="localnet"
SUI_REPO_BRANCH="devnet"
SUI_SCRIPT="lsui"

# Param
DEBUG_RUN=false
GENESIS=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        # -t|--target) target="$2"; shift ;; That's an example with a parameter
        # -f|--flag) flag=1 ;; That's an example flag
        -g|--genesis) GENESIS=true ;;
        -d|--debug) DEBUG_RUN=true ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

if [ "$GENESIS" = true ]; then
  echo "Genesis flag set. Will regenerate the default client addresses and coin objects for localnet."
fi

if [ "$DEBUG_RUN" = true ]; then
  echo "Debug flag set. Will run Localnet in foreground Ctrl-C to Exit"
fi

# Call the initialization code common to all script.
SCRIPT_READLINK="$(readlink -f "$0")"
SCRIPT_NAME="$(basename $SCRIPT_READLINK)"
SCRIPT_DIR="$(dirname $SCRIPT_READLINK)"
source "$SCRIPT_DIR/script_common" "$SCRIPT_DIR" "$SCRIPT_NAME" "$NETNAME" "$SUI_REPO_BRANCH"

common_init_dev_setup

# The script should not be called from a location that will get deleted.
# It would work (on Linux), but it is just to avoid user confusion later.
CWD=$(pwd -P)
if [[ "$CWD" = "$NETWORK_DATA_DIR"* ]]; then
  echo "This script can't be called from a location to be deleted [$NETWORK_DATA_DIR]."
  setup_error "Change current directory location and try again."
fi
CWD=$(pwd -P)
if [[ "$CWD" = "$PUBLISH_DATA_DIR"* ]]; then
  echo "This script can't be called from a location to be deleted [$PUBLISH_DATA_DIR]."
  setup_error "Change current directory location and try again."
fi

# Stop already executing sui (if any)
# Get ps with "sui start", grep exclude itself from the list, head takes the first process (should not be more than one)
# the 1st sed remove leading space, the 2nd sed split words into line and finally the pid is the word on the first/head line.
OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)

if [ ! -z "$OLD_SUI_PID" ]
then
  echo "Stopping running $NETNAME (sui process pid $OLD_SUI_PID)"
  skill -9 $OLD_SUI_PID
  # Make sure it is dead.
  end=$((SECONDS+15))
  DEAD=false
  AT_LEAST_ONE_SECOND=false
  while [ $SECONDS -lt $end ]; do
    OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)
    if [ -z "$OLD_SUI_PID" ]; then
      break
    else
      echo -n "."
      sleep 1
      AT_LEAST_ONE_SECOND=true
    fi
  done

  # Just UI aesthetic newline for when there was "." printed.
  if [ "$AT_LEAST_ONE_SECOND" = true ]; then
    echo 
  fi

  if [ ! -z "$OLD_SUI_PID" ]; then
    setup_error "Sui process pid=$OLD_SUI_PID still running. You must stop (kill) the sui process before starting a new localnet"  
  fi
fi

build_sui_repo_branch

# Clean-up previous localnet (if exists)
RM_DIR="$NETWORK_DATA_DIR"
if [ -d "$RM_DIR" ]
then
  echo "Removing existing $RM_DIR directory"
  rm -rf "$RM_DIR"
fi

# Delete localnet publish directory (if exists) to force re-publication.
RM_DIR="$PUBLISH_DATA_DIR"
if [ -d "$RM_DIR" ]
then
  echo "Removing existing $RM_DIR directory"
  rm -rf "$RM_DIR"
fi

if [ "$GENESIS" = true ]; then
   echo "Generating NEW genesis configuration file only"
   $SUI_BIN_DIR/sui genesis --working-dir "$GENESIS_DATA_DIR" --write-config "$GENESIS_DATA_DIR/config.yaml.new"
   diff "$GENESIS_DATA_DIR/config.yaml.new" "$GENESIS_DATA_DIR/config.yaml"
   exit
fi

echo "Creating new $NETNAME directory"
mkdir -p "$NETWORK_DATA_DIR"
if [ "$DEBUG_RUN" = true ]; then
  $SUI_BIN_DIR/sui genesis --from-config "$GENESIS_DATA_DIR/config.yaml" --working-dir "$NETWORK_DATA_DIR"
else
  $SUI_BIN_DIR/sui genesis --from-config "$GENESIS_DATA_DIR/config.yaml" --working-dir "$NETWORK_DATA_DIR" >& /dev/null
fi

yes | cp -rf "$GENESIS_DATA_DIR/sui.keystore" "$NETWORK_DATA_DIR"
yes | cp -rf "$GENESIS_DATA_DIR/client.yaml" "$NETWORK_DATA_DIR"

# Replace placeholder string in client.yaml with an absolute path to the keystore.
# Notice sed uses '+'' for seperator instead of '/' to avoid clash
# with directory path. Also uses a .bak temp file because Mac (BSD) does not
# allow in-place file change.
SEARCH_STRING="<PUT_WORKING_DIR_PATH_HERE>"
REPLACE_STRING="$NETWORK_DATA_DIR"
sed -i.bak -e "s+$SEARCH_STRING+$REPLACE_STRING+g" "$NETWORK_DATA_DIR/client.yaml" && rm "$NETWORK_DATA_DIR/client.yaml.bak"


# When need to start in foreground to debug.
if [ "$DEBUG_RUN" = true ]; then
  echo "Starting new localnet process (foreground for debug)"
  $SUI_BIN_DIR/sui start --network.config "$NETWORK_CONFIG"
  exit
fi

# Start the new localnet.
echo "Starting new localnet process (may take up to 30 secs)"
$SUI_BIN_DIR/sui start --network.config "$NETWORK_CONFIG" >& "$DEV_DIR/localnet.log" &
NEW_SUI_PID=$!

# Loop until "sui client" confirms to be working, or exit if that takes
# more than 30 seconds.
end=$((SECONDS+30))
ALIVE=false
AT_LEAST_ONE_SECOND=false
while [ $SECONDS -lt $end ]; do
  CHECK_ALIVE=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" objects | grep -i Digest)
  if [ ! -z "$CHECK_ALIVE" ]; then
    ALIVE=true
    break
  else
    echo -n "."
    sleep 1
    AT_LEAST_ONE_SECOND=true
  fi
done

# Just UI aesthetic newline for when there was "." printed.
if [ "$AT_LEAST_ONE_SECOND" = true ]; then
  echo 
fi

# Act on success/failure of the sui process responding to "sui client".
if [ "$ALIVE" = false ]; then 
  echo "Sui process not responding. Try again? (may be the host is too slow?)."
  exit;
fi

echo "New localnet started ($SUI_VERSION, process pid $NEW_SUI_PID)"

# Make sure localnet exists in sui envs (ignore errors because likely already exists)
echo ========
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" new-env --alias localnet --rpc http://0.0.0.0:9000 >& /dev/null

# Make localnet the active envs (should already be done, just in case, do it again here).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" switch --env localnet > /dev/null

# print sui envs to help debugging (if someone else is using this script).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" envs
echo ========
echo All addresses with coins:
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" addresses
echo ========

WALLET_ADDR=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" active-address)
echo "All coins owned by $WALLET_ADDR (active):"
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" gas
echo ========
echo
echo Remember:
echo "  Use \"dsui\" to access devnet"
echo "  Use \"lsui\" to access your localnet"
echo
echo Success. Try it by typing \"lsui client gas\"
