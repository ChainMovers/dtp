#!/bin/bash

# Initialize and start a Sui local network.
#
# Warning:
#   If there is an existing sui local network, it will be deleted
#   and replaced with a fresh installation. All modules, objects and
#   transaction done since genesis will be purged.
#
#   This script will also overwrite any changes under 
#   workspace/sui. This sui local repo should not be used
#   to modify sui itself (other than for may be throw away 
#   debug code).
#
# For future reference, this is how the config.yaml was generated:
#     sui genesis --write-config "$GENESIS_DATA_DIR/config.yaml"

# Utility functions.
setup_error() { echo "$*" 1>&2 ; exit 1; }
version_greater_equal() { printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort; }

# Verify Sui pre-requisites are installed.
which curl &> /dev/null || setup_error "Need to install curl. See https://docs.sui.io/build/install#prerequisites";
which git &> /dev/null || setup_error "Need to install git. See https://docs.sui.io/build/install#prerequisites";
which cmake &> /dev/null || setup_error "Need to install cmake. See https://docs.sui.io/build/install#prerequisites";
which rustc &> /dev/null || setup_error "Need to install rust. See https://docs.sui.io/build/install#prerequisites";
which cargo &> /dev/null || setup_error "Need to install cargo. See https://docs.sui.io/build/install#prerequisites";

# Verify Rust is recent enough.
MIN_RUST_VERSION="rustc 1.65.0"
version_greater_equal "$(rustc --version)" "$MIN_RUST_VERSION" || setup_error "Upgrade rust to a more recent version";

# Just find the absolute path of the "workspace" where most
# dependencies will be downloaded and build/runtime files
# will be located.
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
WS_DIR_REL="$SCRIPT_DIR/../workspace"
WS_DIR="$(cd "$(dirname "$WS_DIR_REL")"; pwd)/$(basename "$WS_DIR_REL")"

# Some other commonly used locations.
SUI_BIN_DIR="$WS_DIR/sui/target/debug"
GENESIS_DATA_DIR="$SCRIPT_DIR/genesis_data"

# Configuration files (often needed for sui CLI calls)
NETWORK_CONFIG="$WS_DIR/localnet/network.yaml"
CLIENT_CONFIG="$WS_DIR/localnet/client.yaml"

# Create workspace if does not exists.
mkdir -p "$WS_DIR"

echo "Workspace Location = $WS_DIR"

# The script should not be called from a location that will get deleted.
CWD=$(pwd -P)
if [[ "$CWD" = "$WS_DIR/localnet"* ]]; then
  echo "This script can't be called from a location to be deleted [$WS_DIR/localnet]."
  setup_error "Change current directory location and try again."
fi

# Stop already executing sui (if any)
# Get ps with "sui start", grep exclude itself from the list, head takes the first process (should not be more than one)
# the 1st sed remove leading space, the 2nd sed split words into line and finally the pid is the word on the first/head line.
OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)

if [ ! -z "$OLD_SUI_PID" ]
then
  echo "Stopping running localnet (sui process pid $OLD_SUI_PID)"
  skill -9 $OLD_SUI_PID
  # Make sure it is dead.
  end=$((SECONDS+15))
  DEAD=false
  AT_LEAST_ONE_SECOND=false
  while [ $SECONDS -lt $end ]; do
    OLD_SUI_PID=$(ps x | grep "sui start" | grep -v grep | head -n 1 | sed -e 's/^[[:space:]]*//' | sed 's/ /\n/g' | head -n 1)
    if [ -z "$OLD_SUI_PID" ]; then
      break
    else
      echo -n "."
      sleep 1
      AT_LEAST_ONE_SECOND=true
    fi
  done

  # Just UI aesthetic newline for when there was "." printed.
  if [ "$AT_LEAST_ONE_SECOND" = true ]; then
    echo 
  fi

  if [ ! -z "$OLD_SUI_PID" ]; then
    setup_error "Sui process pid=$OLD_SUI_PID still running. You must stop (kill) the sui process before starting a new localnet"  
  fi
fi

# If not already done, get the github sui devnet branch.
if [ ! -d "$WS_DIR/sui" ]
then
  git clone -b devnet https://github.com/MystenLabs/sui.git "$WS_DIR/sui"  || setup_error "Failed getting Sui devnet branch from github";
fi

# Update sui devnet local repo (if needed)
(cd $WS_DIR/sui && git remote update >& /dev/null)
V1=$(cd $WS_DIR/sui; git rev-parse HEAD)
V2=$(cd $WS_DIR/sui; git rev-parse '@{u}')
if [ $V1 != $V2 ]
then 
  # Does a bit more than needed, but should allow to recover
  # from most operator error...
  echo Updating sui local repo in workspace...
  (cd $WS_DIR/sui && git switch devnet > /dev/null)
  (cd $WS_DIR/sui && git fetch > /dev/null)
  (cd $WS_DIR/sui && git reset --hard origin/devnet > /dev/null)
  (cd $WS_DIR/sui && git merge '@{u}')
fi

# Verify sui built is latest.
echo Building localnet using latest Sui devnet branch...
(cd $WS_DIR/sui; cargo build)

# Sanity test that the sui devnet binary works
if [ ! -f "$SUI_BIN_DIR/sui" ]; then
  setup_error "$SUI_BIN_DIR/sui binary not found"
fi

SUI_VERSION=$($SUI_BIN_DIR/sui --version)
if [ -z "$SUI_VERSION" ]; then
  setup_error "$SUI_BIN_DIR/sui --version not running properly"
fi

# Check if sui is too old.
MIN_SUI_VERSION="sui 0.17.0"
version_greater_equal "$SUI_VERSION" "$MIN_SUI_VERSION" || setup_error "Sui binary version might be too old"

# Clean-up previous localnet (if exists)
if [ -d "$WS_DIR/localnet" ]
then
  echo Removing existing localnet directory
  rm -rf "$WS_DIR/localnet"
fi

echo Creating new localnet directory
mkdir -p "$WS_DIR/localnet"
$SUI_BIN_DIR/sui genesis --from-config "$GENESIS_DATA_DIR/config.yaml" --working-dir "$WS_DIR/localnet" >& /dev/null
yes | cp -rf "$GENESIS_DATA_DIR/sui.keystore" "$WS_DIR/localnet"
yes | cp -rf "$GENESIS_DATA_DIR/client.yaml" "$WS_DIR/localnet"

# Replace placeholder string in client.yaml with an absolute path to the keystore.
# Notice sed uses '+'' for seperator instead of '/' to avoid clash
# with directory path. Also uses a .bak temp file because Mac (BSD) does not
# allow in-place file change.
SEARCH_STRING="<PUT_WORKING_DIR_PATH_HERE>"
REPLACE_STRING="$WS_DIR/localnet"
sed -i.bak -e "s+$SEARCH_STRING+$REPLACE_STRING+g" "$WS_DIR/localnet/client.yaml" && rm "$WS_DIR/localnet/client.yaml.bak"

# Start the new localnet.
echo "Starting new localnet process (may take up to 30 secs)"
$SUI_BIN_DIR/sui start --network.config "$NETWORK_CONFIG" >& "$WS_DIR/localnet.log" &
NEW_SUI_PID=$!

# Loop until "sui client" confirms to be working, or exit if that takes
# more than 30 seconds.
end=$((SECONDS+30))
ALIVE=false
AT_LEAST_ONE_SECOND=false
while [ $SECONDS -lt $end ]; do
  CHECK_ALIVE=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" envs | grep localnet)
  if [ ! -z "$CHECK_ALIVE" ]; then
    ALIVE=true
    break
  else
    echo -n "."
    sleep 1
    AT_LEAST_ONE_SECOND=true
  fi
done

# Just UI aesthetic newline for when there was "." printed.
if [ "$AT_LEAST_ONE_SECOND" = true ]; then
  echo 
fi

# Act on success/failure of the sui process responding to "sui client".
if [ "$ALIVE" = false ]; then 
  echo "Sui process not responding. Try again? (may be the host is too slow?)."
  exit;
else
  echo "New localnet started (sui process pid $NEW_SUI_PID)"
fi

# Make sure localnet exists in sui envs (ignore errors because likely already exists)
echo ========
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" new-env --alias localnet --rpc http://0.0.0.0:9000 >& /dev/null

# Make localnet the active envs (should already be done, just in case, do it again here).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" switch --env localnet > /dev/null

# print sui envs to help debugging (if someone else is using this script).
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" envs
echo ========

# TODO Sanity check that the localnet is as expected.
WALLET_ADDR=$($SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" active-address)
echo All coin objects own by $WALLET_ADDR:
$SUI_BIN_DIR/sui client --client.config "$CLIENT_CONFIG" gas
echo ========
echo
echo Remember:
echo "  Use \"dsui\" to access devnet"
echo "  Use \"lsui\" to access your localnet"
echo
echo Success. Try it by typing \"lsui client gas\"