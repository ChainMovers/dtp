#!/bin/bash

# Publish on the localnet the DTP Move package found under dtp/move
#
# Do nothing if no change to source code since last publication.
#
# On success, the file dtp/move/localnet/package_id.txt will exist.
# The content is the package id in hexadecimal.
#
# On failures, more info can be found in dtp/move/localnet/publish_output.txt


# Utility functions.
setup_error() { echo "$*" 1>&2 ; exit 1; }
version_greater_equal() { printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort; }
script_cmd() { script -efqa "$SCRIPT_OUTPUT" -c "$*"; }
beginswith() { case $2 in "$1"*) true;; *) false;; esac; }

# Just find the absolute path of the "dtp-dev" where most
# dependencies will be downloaded and build/runtime files
# will be located.
SCRIPT_READLINK="$(readlink -f "$0")"
SCRIPT_NAME="$(basename $SCRIPT_READLINK)"
SCRIPT_DIR="$(dirname $SCRIPT_READLINK)"
DEV_DIR_REL="$SCRIPT_DIR/../../dtp-dev"
DEV_DIR="$(cd "$(dirname "$DEV_DIR_REL")"; pwd)/$(basename "$DEV_DIR_REL")"
MOVE_SRC_DIR_REL="$SCRIPT_DIR/../move"
MOVE_SRC_DIR="$(cd "$(dirname "$MOVE_SRC_DIR_REL")"; pwd)/$(basename "$MOVE_SRC_DIR_REL")"
LOCAL_BIN="$HOME/.local/bin"

# Some other commonly used locations.
SUI_REPO_DIR="$DEV_DIR/sui-devnet"
SUI_BIN_DIR="$SUI_REPO_DIR/target/debug"
GENESIS_DATA_DIR="$SCRIPT_DIR/genesis_data"
PUBLISH_DATA_DIR="$DEV_DIR/publish_data/localnet"

# Configuration files (often needed for sui CLI calls)
NETWORK_CONFIG="$DEV_DIR/localnet/network.yaml"
CLIENT_CONFIG="$DEV_DIR/localnet/client.yaml"

# Output of some external commands are "tee" into a file.
# Using script instead of tee to preserve color and also have timestamp
# as delimiter between output appended. See script_cmd()
SCRIPT_OUTPUT="$PUBLISH_DATA_DIR/publish_output.txt"
PACKAGE_ID_OUTPUT="$PUBLISH_DATA_DIR/package_id.txt"

# Remove some output from previous runs to minimize confusion.
rm -rf "$SCRIPT_OUTPUT"

# Following file created only on confirmed success of publication.
rm -rf "$PUBLISH_DATA_DIR/package_id.txt"

# Sanity check init-localnet was done.
if [ ! -d "$DEV_DIR" ]; then
  setup_error "$DEV_DIR missing. Please run 'dtp/script/init-localnet'"
fi

if [ ! -d "$DEV_DIR/sui-devnet" ]; then
  setup_error "$DEV_DIR/sui-devnet missing. Please run 'dtp/script/init-localnet'"
fi

if [ ! -d "$DEV_DIR/localnet" ]; then
  setup_error "$DEV_DIR/localnet missing. Please run 'dtp/script/init-localnet'"
fi

# Create dtp-dev/publish_data if does not exists.
mkdir -p "$PUBLISH_DATA_DIR"

echo "Output location = $PUBLISH_DATA_DIR"

# Sanity test that the sui binary works
if [ ! -f "$SUI_BIN_DIR/sui" ]; then
  setup_error "$SUI_BIN_DIR/sui binary not found. Please run 'dtp/script/init-localnet'"
fi

SUI_VERSION=$($SUI_BIN_DIR/sui --version)
if [ -z "$SUI_VERSION" ]; then
  setup_error "$SUI_BIN_DIR/sui --version not running properly. Please run 'dtp/script/init-localnet'"
fi

# Check that lsui is properly installed.
LSUI_VERSION=$(lsui --version)
if [ -z "$LSUI_VERSION" ]; then
  setup_error "lsui not installed properly. Please run 'dtp/script/init-localnet'"
fi

if [ "$SUI_VERSION" != "$LSUI_VERSION" ]; then
  setup_error "lsui and sui somehow not same binary. Please run 'dtp/script/init-localnet'"
fi

# Check if lsui is recent enough.
version_greater_equal "$LSUI_VERSION" "$MIN_SUI_VERSION" || setup_error "Sui binary version too old (not supported)"

# Loop until "lsui client" confirms to be working, or exit if that takes
# more than 30 seconds.
end=$((SECONDS+30))
ALIVE=false
AT_LEAST_ONE_SECOND=false
while [ $SECONDS -lt $end ]; do
  CHECK_ALIVE=$(lsui client objects | grep -i Digest)
  if [ ! -z "$CHECK_ALIVE" ]; then
    ALIVE=true
    break
  else
    echo -n "."
    sleep 1
    AT_LEAST_ONE_SECOND=true
  fi
done

# Just UI aesthetic newline for when there was "." printed.
if [ "$AT_LEAST_ONE_SECOND" = true ]; then
  echo 
fi

# Act on success/failure of the sui process responding to "sui client".
if [ "$ALIVE" = false ]; then 
  echo "Sui process not responding.  Please run 'dtp/script/init-localnet'"
  exit;
fi

echo "$SUI_VERSION localnet running"

# Make sure localnet exists in sui envs (ignore errors because likely already exists)
lsui client new-env --alias localnet --rpc http://0.0.0.0:9000 >& /dev/null

# Make sure localnet is the active envs.
lsui client switch --env localnet > /dev/null || setup_error "Could not switch to localnet"

# Run all unit tests.
script_cmd "lsui move test --install-dir \"$PUBLISH_DATA_DIR\" -p \"$MOVE_SRC_DIR\""

# Build the Move package for publication.
echo Publishing...
script_cmd "lsui client publish --verify-dependencies --gas-budget 30000 --install-dir \"$PUBLISH_DATA_DIR\" \"$MOVE_SRC_DIR\""

# Grab the first line with an immutable "ID" after the "Created Objects" string.
id_line=$(cat "$SCRIPT_OUTPUT" | sed '1,/Created Objects/d' | grep 'ID' | grep 'Immutable')

if [ -z "$id_line" ]; then
  setup_error "Could not find the package id from $SCRIPT_OUTPUT"
fi

ID=""
for i in $id_line
do  
  if beginswith 0x $i; then
    ID=$i
    break;
  fi  
done

if [ -z "$ID" ]; then
  setup_error "Could not find Package id in $SCRIPT_OUTPUT"
fi

# TODO Validate the package ID is all hexadecimal

# Test the publication by retreiving object information from the network
# for that new package id.
script_cmd "lsui client object $ID"
validation=$(lsui client object $ID | grep "Move Package")
if [ -z "$validation" ]; then
  setup_error "Unexpected object type (Not a Move Package)"
fi

# Create the package_id.txt file to confirm to caller successful publication.
echo "$ID" > "$PUBLISH_DATA_DIR/package_id.txt"
echo
echo PackageID is [$ID]
echo Publication Successful
