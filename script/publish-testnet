#!/bin/bash

# Publish on the remote testnet the DTP Move package found under ~/dtp/move
#
# Do nothing if no change to source code since last publication.
#
# On success, the file ~/dtp-dev/publish_data/testnet/package_id.txt and client_addresses.txt
# will be created. The content are addresses in hexadecimal, starting with 0x.
#
# On failures, more info can be found in ~/dtp-dev/publish_data/testnet/publish_output.txt

NETNAME="testnet"
SUI_REPO_BRANCH="devnet"
SUI_SCRIPT="tsui"

# Call the initialization code common to all script.
SCRIPT_READLINK="$(readlink -f "$0")"
SCRIPT_NAME="$(basename $SCRIPT_READLINK)"
SCRIPT_DIR="$(dirname $SCRIPT_READLINK)"
source "$SCRIPT_DIR/script_common" "$SCRIPT_DIR" "$SCRIPT_NAME" "$NETNAME" "$SUI_REPO_BRANCH"

# Following files created only on confirmed success of publication.
# Remove output from potential previous runs to minimize confusion.
rm -rf "$SCRIPT_OUTPUT"
rm -rf "$PACKAGE_ID_OUTPUT"
rm -rf "$CLIENT_ADDRESSES_OUTPUT"

# Create dtp-dev/publish_data if does not exists.
mkdir -p "$PUBLISH_DATA_DIR"

echo "Output location = $PUBLISH_DATA_DIR"

# Check that tsui is properly installed.
SUI_SCRIPT_VERSION=$("$SUI_SCRIPT" --version)
if [ -z "$SUI_SCRIPT_VERSION" ]; then
  setup_error "$SUI_SCRIPT not installed properly. Please run 'dtp/script/init-$NETNAME'"
fi

# Make sure testnet exists in sui envs (ignore errors because likely already exists)
$SUI_SCRIPT client new-env --alias testnet --rpc https://fullnode.testnet.sui.io:443 >& /dev/null

# Make sure $NETNAME is the active envs.
$SUI_SCRIPT client switch --env $NETNAME > /dev/null || setup_error "Could not switch to $NETNAME"

# Run all unit tests.
script_cmd "$SUI_SCRIPT move test --install-dir \"$PUBLISH_DATA_DIR\" -p \"$MOVE_SRC_DIR\""

# Build the Move package for publication.
echo Publishing...
script_cmd "$SUI_SCRIPT client publish --verify-dependencies --gas-budget 30000 --install-dir \"$PUBLISH_DATA_DIR\" \"$MOVE_SRC_DIR\""

# Grab the first line with an immutable "ID" after the "Created Objects" string.
id_line=$(cat "$SCRIPT_OUTPUT" | sed '1,/Created Objects/d' | grep 'ID' | grep 'Immutable')

if [ -z "$id_line" ]; then
  setup_error "Could not find the package id from $SCRIPT_OUTPUT"
fi

ID=""
for i in $id_line
do  
  if beginswith 0x $i; then
    ID=$i
    break;
  fi  
done

if [ -z "$ID" ]; then
  setup_error "Could not find Package id in $SCRIPT_OUTPUT"
fi

# TODO Validate the package ID is all hexadecimal

# Test the publication by retreiving object information from the network
# using that parsed package id.
script_cmd "lsui client object $ID"
validation=$(lsui client object $ID | grep "Move Package")
if [ -z "$validation" ]; then
  setup_error "Unexpected object type (Not a Move Package)"
fi

# Write in client_addresses.txt the addresses created by config.yaml on genesis.
# sed remove all the spaces and replace "address:" with "0x"
$(cat "$GENESIS_DATA_DIR/config.yaml" | grep address | sed 's/ //g' | sed 's/\(^.*address:\)/0x/g' > "$PUBLISH_DATA_DIR/client_addresses.txt")

# Create the package_id.txt file to confirm to caller successful publication.
echo "$ID" > "$PUBLISH_DATA_DIR/package_id.txt"
echo
echo PackageID is [$ID]
echo Publication Successful
